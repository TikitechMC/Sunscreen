package me.combimagnetron.sunscreen.renderer.map;

import me.combimagnetron.sunscreen.resourcepack.CodeBlock;
import me.combimagnetron.sunscreen.resourcepack.ResourcePackManager;
import me.combimagnetron.sunscreen.resourcepack.ResourcePackPath;
import me.combimagnetron.sunscreen.resourcepack.feature.shader.Shader;
import me.combimagnetron.sunscreen.resourcepack.feature.shader.ShaderOverride;
import me.combimagnetron.sunscreen.resourcepack.meta.PackVersion;
import me.combimagnetron.sunscreen.util.Identifier;

import java.util.Collection;
import java.util.List;

public class MapShader implements Shader {
    @Override
    public Collection<ShaderOverride> shaderOverrides() {
        return List.of();
    }

    @Override
    public PackVersion version() {
        return null;
    }

    @Override
    public String name() {
        return "";
    }

    @Override
    public String description() {
        return "Contains the map renderer and protocol implementation.";
    }

    @Override
    public String author() {
        return "Combimagnetron";
    }

    @Override
    public Section fragment() {
        return Section.mojang(
                CodeBlock.shader()
                        .line("void main() {")
                ,
                CodeBlock.shader()
                        .line("// Generated by Sunscreen")
                        .line("// About:" + description())
                        .line("// Author(s): " + author())
                        .line("#include <fracture.frag>")
                        .line("#include <fracture.vert>")
                ,
                CodeBlock.shader()
                        .line("uniform sampler2D map_texture;")
                        .line("uniform vec2 map_size;")
                        .line("uniform vec2 map_position;")
                        .line("uniform vec2 map_scale;")
                        .line("uniform vec2 map_rotation;")
                ,
                CodeBlock.shader()
                        .line("vec2 map_position = vec2(0.0, 0.0);")
                        .line("vec2 map_scale = vec2(1.0, 1.0);")
                        .line("vec2 map_rotation = vec2(0.0, 0.0);")
        );
    }

    @Override
    public Section vertex() {
        return Section.mojang(
                CodeBlock.shader()
                        .line("void main() {")
                ,
                CodeBlock.shader()
                        .line("// Generated by Sunscreen")
                        .line("// About:" + description())
                        .line("// Author(s): " + author())
                        .line("#moj_import <sunscreen_map.glsl>")
                        .line("#include <fracture.vert>")
                ,
                CodeBlock.shader()
                        .line("uniform sampler2D map_texture;")
                        .line("uniform vec2 map_size;")
                        .line("uniform vec2 map_position;")
                        .line("uniform vec2 map_scale;")
                        .line("uniform vec2 map_rotation;")
                ,
                CodeBlock.shader()
                        .line("vec2 map_position = vec2(0.0, 0.0);")
                        .line("vec2 map_scale = vec2(1.0, 1.0);")
                        .line("vec2 map_rotation = vec2(0.0, 0.0);")
        );
    }

    @Override
    public Section customFragment() {
        return null;
    }

    @Override
    public Section customVertex() {
        return null;
    }

    @Override
    public Identifier identifier() {
        return Identifier.of("sunscreen", "map_shader");
    }

    @Override
    public ResourcePackPath path() {
        return null;
    }
}
